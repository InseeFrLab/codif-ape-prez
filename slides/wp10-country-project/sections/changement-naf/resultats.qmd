## Evaluation Challenge

- ‚ùì Key question: How to [**evaluate**]{.orange} an LLM?: 
- Classification seems simpler... but [**complexity of taxonomy**]{.orange} matters.

- Used $27k$ manual annotations as the benchmark ü•á
  
- [**3 performance metrics**]{.orange}:
  - Overall [**accuracy**]{.blue2}
  - Accuracy among [**codable entries**]{.blue2}
  - Accuracy of [**LLM only**]{.blue2}

## Performance of models {.scollable}
```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'model': ['Qwen2.5', 'Qwen2.5', 'Qwen2.5',
              'Ministral', 'Ministral', 'Ministral',
              'Mistral', 'Mistral', 'Mistral',
              'Llama3.1', 'Llama3.1', 'Llama3.1'],
    'accuracy_type': ["Overall accuracy", 'Accuracy "LLM-only"', 'Accuracy among "codable"'] * 4,
    'accuracy': [.6657, .7397, .7300,
                .6784, .7538, .6786,
                .7173, .7971, .7238,
                .6836, .7688, .7209]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the model order (you can adjust this if you want a different order)
model_order = ['Qwen2.5', 'Ministral', 'Mistral', 'Llama3.1']
df['model'] = pd.Categorical(df['model'], categories=model_order, ordered=True)

accuracy_order = ["Overall accuracy", 'Accuracy "LLM-only"', 'Accuracy among "codable"']
df['accuracy_type'] = pd.Categorical(df['accuracy_type'], categories=accuracy_order, ordered=True)

# Format accuracy values for labels
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='model', y='accuracy'))
 + geom_segment(aes(x='model', xend='model', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)
 + facet_wrap('~accuracy_type', ncol=3)
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 4.5),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```


## Reconstructing Ambiguous Dataset
- üí°[**Idea**]{.orange}: Treat LLMs as [**additional annotators**]{.blue2}
- ‚ùìCan we boost performance via [ensemble methods]{.blue2}?
- Built 3 more annotations:
1. [**Cascade selection**]{.blue2}
2. [**Majority vote**]{.blue2}
3. [**Weighted vote**]{.blue2}

## Annotation Fusion

```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'model': ['Qwen2.5'] * 5 + ['Ministral'] * 5 + ['Mistral'] * 5 + ['Cascade'] * 5 + ['Vote'] * 5,
    'level': ['Section', 'Division', 'Group', 'Class', 'Sub-class'] * 5,
    'accuracy': [.8431, .8213, .7335, .6835, .6657,
                 .9016, .8726, .7729, .7044, .6784,
                 .9110, .8869, .7928, .7375, .7173,
                 .935, .91, .82, .77, .75,
                 .935, .91, .82, .77, .76]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the model order (you can adjust this if you want a different order)
model_order = ['Qwen2.5', 'Ministral', 'Mistral', "Cascade", "Vote",]
df['model'] = pd.Categorical(df['model'], categories=model_order, ordered=True)

# Define the correct order of levels
level_order = ['Sub-class', 'Class', 'Group', 'Division','Section',]

# Convert level to categorical with the specified order
df['level'] = pd.Categorical(df['level'], categories=level_order, ordered=True)

# Format accuracy values for labels
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='model', y='accuracy'))
 + geom_segment(aes(x='model', xend='model', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)
 + facet_wrap('~level', ncol=3)
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 6),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```


## Retraining with NACE R√©v. 2.1

- [**Rebuilt**]{.orange} new registry dataset with NACE R√©v. 2.1 (~2M records)
- [**Data distribution unchanged**]{.orange}
- New registry [**variables used**]{.orange}
- Achieved [**comparable performance**]{.orange} to NACE R√©v. 2 model

## Retraining Accuracy {background-color="white"}

```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'data_type': ['Test data'] * 5 + ['Manually annotated data'] * 5,
    'level': ['Section', 'Division', 'Group', 'Class', 'Sub-class'] * 2,
    'accuracy': [
        0.8551939324497377,
        0.8328925927834847,
        0.7973293897956999,
        0.7843529836218961,
        0.7762214195942544,
        0.9668600758759206,
        0.95529271739939,
        0.9162389347615859,
        0.8986461355352228,
        0.8887153165216097
    ]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the correct order of levels
level_order = ['Sub-class', 'Class', 'Group', 'Division','Section',]

# Convert level to categorical with the specified order
df['level'] = pd.Categorical(df['level'], categories=level_order, ordered=True)

# Format accuracy values for labels (rounded to 3 decimal places)
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='level', y='accuracy'))
 + geom_segment(aes(x='level', xend='level', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)  # Add value labels
 + facet_wrap('~data_type')
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 6),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```


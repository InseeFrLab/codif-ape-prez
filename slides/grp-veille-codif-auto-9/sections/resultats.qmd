## Le fl√©au de l'√©valuation

- ‚ùì Question cruciale : 
  - Comment [**√©valuer**]{.orange} un LLM ?
  - Classification ‚û°Ô∏è plus facile, vraiment ?
  - Complexit√© de la nomenclature

- Utilisation des $27k$ annotations comme ground truth ü•á
  
- [**3 m√©triques**]{.orange} de performances :
  - Pr√©cision [**totale**]{.blue2}
  - Pr√©cision parmi les [**"codables"**]{.blue2}
  - Pr√©cision [**"LLM"**]{.blue2} (erreurs imputables √† la g√©n√©ration seulement)


## Performance des mod√®les {.scollable}
```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'model': ['Qwen', 'Qwen', 'Qwen',
              'Ministral', 'Ministral', 'Ministral',
              'Mistral', 'Mistral', 'Mistral',
              'Llama3.1', 'Llama3.1', 'Llama3.1'],
    'accuracy_type': ["Pr√©cision totale", 'Pr√©cision "LLM"', 'Pr√©cision parmi les "codables"'] * 4,
    'accuracy': [.6657, .7397, .7300,
                .6784, .7538, .6786,
                .7173, .7971, .7238,
                .6836, .7688, .7209]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the model order (you can adjust this if you want a different order)
model_order = ['Qwen', 'Ministral', 'Mistral', 'Llama3.1']
df['model'] = pd.Categorical(df['model'], categories=model_order, ordered=True)

accuracy_order = ["Pr√©cision totale", 'Pr√©cision "LLM"', 'Pr√©cision parmi les "codables"']
df['accuracy_type'] = pd.Categorical(df['accuracy_type'], categories=accuracy_order, ordered=True)

# Format accuracy values for labels
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='model', y='accuracy'))
 + geom_segment(aes(x='model', xend='model', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)
 + facet_wrap('~accuracy_type', ncol=3)
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 4.5),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```

::: {.callout-important}
Les performances du mod√®le Mistral ne sont pour le moment pas comparables.
:::

## Reconstruction du jeu multivoques

- üí°[**Principe**]{.orange} : consid√©rer les LLMs comme des [**annotateurs classiques**]{.blue2} ‚û°Ô∏è X-annotation
- ‚ùìPeut-on am√©liorer performances en [**mixant les r√©sultats**]{.blue2} de chaque mod√®les ?
- Construction de [**3 annotations**]{.orange} suppl√©mentaires 
  1. Choix en [**cascade**]{.blue2} (un mod√®le en priorit√©)
  2. Choix par [**vote √† la majorit√©**]{.blue2} 
  3. Choix par [**vote pond√©r√©**]{.blue2}

## Combinaison des annotations

```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'model': ['Qwen'] * 5 + ['Ministral'] * 5 + ['Mistral'] * 5 + ['Llama3.1'] * 5 + ['Cascade'] * 5 + ['Vote'] * 5,
    'level': ['Section', 'Division', 'Groupe', 'Classe', 'Sous-classe'] * 6,
    'accuracy': [.8431, .8213, .7335, .6835, .6657,
                 .9016, .8726, .7729, .7044, .6784,
                 .9110, .8869, .7928, .7375, .7173,
                 .8771, .8508, .7627, .7041, .6836,
                 .9233, .8978, .8063, .7544, .7351,
                 .9215, .8963, .8044, .7529, .7330]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the model order (you can adjust this if you want a different order)
model_order = ['Qwen', 'Ministral', 'Mistral', 'Llama3.1', "Cascade", "Vote",]
df['model'] = pd.Categorical(df['model'], categories=model_order, ordered=True)

# Define the correct order of levels
level_order = ['Sous-classe', 'Classe', 'Groupe', 'Division','Section',]

# Convert level to categorical with the specified order
df['level'] = pd.Categorical(df['level'], categories=level_order, ordered=True)

# Format accuracy values for labels
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='model', y='accuracy'))
 + geom_segment(aes(x='model', xend='model', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)
 + facet_wrap('~level', ncol=3)
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 6),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```


## R√©-entrainement en NAF 2025

- [**Reconstruction**]{.orange} du stock Sirene 4 en NAF 2025 ($~2$ millions d'observations)
- Distribution des donn√©es [**quasi-inchang√©es**]{.orange}
- Utilisation de [**nouvelles variables**]{.orange} propres √† Sirene 4
- [**Performances similaires**]{.orange} au mod√®le en NAF 2008

## R√©-entrainement en NAF 2025 {background-color="white"}

```{python}
import pandas as pd
import numpy as np
from plotnine import *

# Create the data
data = {
    'data_type': ['Donn√©es Test'] * 5 + ['Donn√©es manuellement annot√©es'] * 5,
    'level': ['Section', 'Division', 'Groupe', 'Classe', 'Sous-classe'] * 2,
    'accuracy': [
        0.8551939324497377,
        0.8328925927834847,
        0.7973293897956999,
        0.7843529836218961,
        0.7762214195942544,
        0.9668600758759206,
        0.95529271739939,
        0.9162389347615859,
        0.8986461355352228,
        0.8887153165216097
    ]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define the correct order of levels
level_order = ['Sous-classe', 'Classe', 'Groupe', 'Division','Section',]

# Convert level to categorical with the specified order
df['level'] = pd.Categorical(df['level'], categories=level_order, ordered=True)

# Format accuracy values for labels (rounded to 3 decimal places)
df['accuracy_label'] = df['accuracy'].round(2).astype(str)

# Create the lollipop chart
(ggplot(df, aes(x='level', y='accuracy'))
 + geom_segment(aes(x='level', xend='level', y=0, yend='accuracy'))
 + geom_point(size=3, color='blue')
 + geom_text(aes(label='accuracy_label'), va='bottom', ha='center', 
             size=8, nudge_y=0.02)  # Add value labels
 + facet_wrap('~data_type')
 + theme_minimal()
 + labs(
     x='',
     y=''
 )
 + theme(
     figure_size=(12, 6),  # Increased width to accommodate labels
     panel_spacing=0.05,
     axis_text=element_text(size=10),
     axis_title=element_text(size=12),

 )
 + scale_y_continuous(limits=[0, 1.05], breaks=np.arange(0, 1.1, 0.1))  # Increased upper limit to fit labels
)
```


## Le mod√®le NAF 2025 {.scrollable}

```{ojs}
viewof activite = Inputs.text(
  {label: '', value: 'coiffeur', width: 800}
)

viewof type_form = Inputs.text(
  {label: 'Type de la liasse', value: 'X', width: 80}
)
urlApe = `https://codification-ape-dev.lab.sspcloud.fr/predict?description_activity=${activite}%20&type_form=${type_form}&event=01P&nb_echos_max=3&prob_min=0.0009`

d3.json(urlApe).then( res => {
  var IC, results;
  ( {IC, ...results} = res )

  IC = parseFloat(IC)

  const rows = Object.values(results).map( obj => {
    return `
    <tr>
      <td>${obj.code} | ${obj.libelle}</td>
      <td>${obj.probabilite.toFixed(3)}</td>
    </tr>
  `
  }).join('')
  
  return html`
  <table>
    <caption>
      Indice de confiance : ${IC.toFixed(3)}
    </caption>
    <tr>
      <th style="text-align:center;">Libell√© (NAF 2025)</th>
      <th>Probabilit√©</th>
    </tr>
      ${rows}
  </table>`
})
```


```{ojs}
import { debounce } from "@mbostock/debouncing-input" 
```

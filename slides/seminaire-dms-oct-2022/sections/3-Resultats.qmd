

## Une bonne performance globale


```{r, dev = "png", dev.args=list(bg="transparent")}
#| label: fig-acc
#| fig-cap: Taux de précision pour chaque niveau de la nomenclature du code APE.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center


Accuracy_lvl <- Accuracy_lvl %>%
    mutate(Level = factor(Level, levels = paste("Niveau", paste(seq(5,1,-1))))
    )

plot_Accuracy_lvl <- function(data){
  plot<- ggplot(data , aes(x=Level, y=Accuracy, fill=Type))+
    geom_bar(stat = "identity", position = position_dodge())+
    geom_text(aes(label=round(Accuracy,2)), position=position_dodge(width=0.9), vjust=-0.25, size = 6)+
    scale_fill_manual(values=c(Palette_col), labels=c("Données guichet unique", "Données test"))+
    annotate("rect", xmin=c(0.5), xmax=c(1.5), ymin=c(-0.01) , ymax=c(1), color="#EE0220", fill=NA, size=1.5)+
    guides(fill=guide_legend(nrow=1, byrow=TRUE))+
    expand_limits(y = 1.)+
    theme_custom()+
    theme(
      text = element_text(size = 16),
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 18),
      axis.text.y = element_text(size = 18),
      axis.text.x = element_text(size = 18),
    )
  return(plot)
}

plot_Accuracy_lvl(Accuracy_lvl)+ 
    theme(
        panel.background = element_rect(fill='transparent'),
         plot.background = element_rect(fill='transparent', color=NA)
    )


```


- Près de [**80%**]{.orange} des libellés issus du guichet unique sont correctement codifiés.
- Erreurs de prédiction [**proches**]{.orange} dans la nomenclature.

## Une aide à la reprise manuelle


```{r, dev = "png", dev.args=list(bg="transparent")}
#| label: fig-top-k
#| fig-cap: Top-K Accuracy pour chaque jeu de données.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center

plot_TOPK_Accuracy  <- function(data){
  plot<- ggplot(data , aes(x=Type, y=Accuracy, fill=Topk))+
    geom_bar(stat = "identity", position = position_dodge())+
    geom_text(aes(label=round(Accuracy,2)), position=position_dodge(width=0.9), vjust=-0.25, size = 6)+
    scale_fill_manual(values=c(Palette_col))+
    expand_limits(y = 1.)+
    guides(fill=guide_legend(nrow=1, byrow=TRUE))+
    theme_custom()+
    theme(
      text = element_text(size = 16),
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 18),
      axis.text.y = element_text(size = 18),
      axis.text.x = element_text(size = 18),
    )
  return(plot)
}

plot_TOPK_Accuracy(TOPK_Accuracy)+ 
    theme(
        panel.background = element_rect(fill='transparent'),
         plot.background = element_rect(fill='transparent', color=NA)
    )



```

- Connaissance des probabilités pour chaque classe.
- Dans [**94%**]{.orange} des cas, la bonne classification se trouve dans les 5 prédictions les plus probables. 

## Une performance hétérogène en fonction des classes

```{r, dev = "png", dev.args=list(bg="transparent")}
#| label: fig-f1
#| fig-cap: Distribution du F1-score en fonction de la fréquence des classes.
#| fig-width: 13
#| fig-height: 7
#| fis-pos: center

F1_distrib_by_cat <- F1_distrib_by_cat %>%
      mutate(
           Group = factor(Group, levels = c("Catégories représentant 50% des données",
                                            "Catégories représentant 25% des données",
                                            "Catégories représentant 20% des données",
                                            "Catégories représentant 5% des données"
                                            
           ))
           )

plot_F1_distrib_by_cat <- function(data){
  ggplot(data) + 
    ggtitle("Distribution du F1-score en fonction de la fréquence des classes")+
    geom_histogram(aes(x=value, fill=Group),binwidth=.05, position="identity") +
    facet_wrap(. ~ Group,ncol = 1, strip.position="left") +
    theme_custom()+
    xlim(c(0,1))+
    scale_fill_manual(values = Palette_col)+
    theme(strip.placement = "outside",
          strip.text.y = element_blank(),
          text = element_text(size = 16),
          plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
          legend.text = element_text(size = 22),
          axis.text.y = element_text(size = 18),
          axis.text.x = element_text(size = 18),
          panel.spacing = unit(1, "lines")
    )+
    guides(fill=guide_legend(nrow=2, byrow=TRUE))
  
}



plot_F1_distrib_by_cat(F1_distrib_by_cat)+ 
    theme(
        panel.background = element_rect(fill='transparent'),
         plot.background = element_rect(fill='transparent', color=NA)
    )



```

- [**Performance mitigée**]{.orange} sur plusieurs classes peu fréquentes.
